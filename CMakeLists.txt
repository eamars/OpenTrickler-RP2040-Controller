cmake_minimum_required(VERSION 3.23.0)

# Set project data
set(PROJECT_NAME "OpenTricklerController")
set(TARGET_NAME "app")

message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")

# Set env variable 'PICO_SDK_PATH' to the local Pico SDK
# Comment out the set() if you have a global copy of the
# SDK set and $PICO_SDK_PATH defined in your $PATH
set(ENV{PICO_SDK_PATH} "${CMAKE_SOURCE_DIR}/library/pico-sdk")
set(PICO_SDK_PATH $ENV{PICO_SDK_PATH})

# Set flags and directory variables
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -DDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -DDEBUG")
set(SRC_DIRECTORY "${CMAKE_SOURCE_DIR}/src")
set(FREERTOS_SRC_DIRECTORY "${CMAKE_SOURCE_DIR}/library/FreeRTOS-Kernel")
set(U8G2_SRC_DIRECYTORY "${CMAKE_SOURCE_DIR}/library/u8g2")
set(U8G2_MUI_DIRECTORY "${U8G2_SRC_DIRECYTORY}/csrc")
set(TMC_SRC_DIRECTORY "${CMAKE_SOURCE_DIR}/library/Trinamic-library")
set(SCRIPTS_DIRECTORY "${CMAKE_SOURCE_DIR}/scripts")
set(PICO_BOARD_HEADER_DIRS "${CMAKE_SOURCE_DIR}/targets")
set(PICOWOTA_DIRECTORY "${CMAKE_SOURCE_DIR}/library/picowota")

# Include the Pico SDK
include(${PICO_SDK_PATH}/pico_sdk_init.cmake)

# Name the project
project(${PROJECT_NAME}
        LANGUAGES C CXX ASM
        DESCRIPTION "Firmware for OpenTrickler Controller"
)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Append compiler flags
SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -fdata-sections -ffunction-sections")
SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fdata-sections -ffunction-sections")
# SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections")

# On Windows, here we have a problem: If not full "Windows 10 SDK" from Build Tools for Visual Studio is installed, we'll fail on building PIOASM and ELF2UF2
# Two options:
# #1 Install "Full Build Tools" -> https://vanhunteradams.com/Pico/Setup/PicoSetup.html
# #2 Manually get precompiled PIOASM.exe and ELF2UF2.exe from https://sourceforge.net/projects/rpi-pico-utils/ and place it under library/ELF2UF2_PIOASM
SET(PIOASM_ELF2UF2_OPTION 2) # choose your option: 1 or 2
if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
    message("---------------If build fails on elf2uf2, consider looking at CMakeLists.txt around line 50 ;-)---------------")
endif()
if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" AND PIOASM_ELF2UF2_OPTION EQUAL 2) # avoid building pioasm and elf2uf2 on windows machines
    set(ELF2UF2_PATH "${CMAKE_SOURCE_DIR}/library/ELF2UF2_PIOASM")
    set(PIOASM_PATH  "${CMAKE_SOURCE_DIR}/library/ELF2UF2_PIOASM")

    # .-------------------------------------------------------.
    # | Avoid building 'pioasm'                               |
    # |                                                       |
    add_executable(Pioasm IMPORTED)                         # |
    set_property(TARGET Pioasm PROPERTY IMPORTED_LOCATION   # |
        ${PIOASM_PATH}/pioasm)                              # |
    set(Pioasm_FOUND 1)                                     # |
    # |                                                       |
    # `-------------------------------------------------------'

    # .-------------------------------------------------------.
    # | Avoid building 'elf2uf2'                              |
    # |                                                       |
    add_executable(ELF2UF2 IMPORTED)                        # |
    set_property(TARGET ELF2UF2 PROPERTY IMPORTED_LOCATION  # |
       ${ELF2UF2_PATH}/elf2uf2)                              # |
    set(ELF2UF2_FOUND 1)                                    # |
    # |                                                       |
    # `-------------------------------------------------------'
endif()

# Initialise the Pico SDK
pico_sdk_init()

# TODO - would be cool to have any WiFi credentials saved exclusively on the PICO EEPROM, but not being erased on any firmware update...
set(PICOWOTA_WIFI_SSID "OpenTricklerBootloader") # The WiFi network SSID
set(PICOWOTA_WIFI_PASS "opentrickler") # The WiFi network password
set(PICOWOTA_WIFI_AP "1") # Optional; 0 = connect to the network, 1 = create it
add_subdirectory(${PICOWOTA_DIRECTORY})

# Application
add_executable("${TARGET_NAME}")

# Include source
include_directories(${SRC_DIRECTORY}
)

# Pull in FreeRTOS
include(${FREERTOS_SRC_DIRECTORY}/portable/ThirdParty/GCC/RP2040/FreeRTOS_Kernel_import.cmake)

# Pull in u8g2
add_subdirectory(${U8G2_SRC_DIRECYTORY})

# Pull in Trinamic library (we don't use CMakeLists provided by TMC library as I don't want hal stuff)
add_library(trinamic INTERFACE)
target_sources(trinamic INTERFACE
    ${TMC_SRC_DIRECTORY}/common.c
    ${TMC_SRC_DIRECTORY}/tmc_interface.c
    ${TMC_SRC_DIRECTORY}/tmc2130.c
    ${TMC_SRC_DIRECTORY}/tmc2209.c
    ${TMC_SRC_DIRECTORY}/tmc5160.c
)
target_include_directories(trinamic INTERFACE ${TMC_SRC_DIRECTORY})

# Pull in u8g2 mui
add_library(u8g2_mui
    ${U8G2_MUI_DIRECTORY}/mui_u8g2.c
    ${U8G2_MUI_DIRECTORY}/mui.c
    ${U8G2_MUI_DIRECTORY}/u8g2_button.c
    ${U8G2_MUI_DIRECTORY}/u8g2_box.c
)
target_link_libraries(u8g2_mui u8g2)

# Pull in src
add_subdirectory(${SRC_DIRECTORY})

# Collect all source files
file(GLOB SRC ${SRC_DIRECTORY}/*.c 
              ${SRC_DIRECTORY}/*.cpp
)

# Include application source file
target_sources("${TARGET_NAME}" PUBLIC
    ${SRC}
)

# Include additional headers
target_include_directories("${TARGET_NAME}" PUBLIC ${CMAKE_SOURCE_DIR}/targets)

# Include libraries1
target_link_libraries("${TARGET_NAME}"
    pico_stdlib
    hardware_pio
    hardware_spi
    hardware_i2c
    FreeRTOS-Kernel
    FreeRTOS-Kernel-Heap4
    u8g2
    u8g2_mui
    trinamic
    picowota_reboot
)

if (PICO_BOARD STREQUAL "pico_w" )
    message("Using PICO_W board, link cyw43")
    target_link_libraries("${TARGET_NAME}" 
        pico_cyw43_arch_lwip_sys_freertos
        pico_lwip_freertos
        # pico_lwip_http
        )
endif()

target_link_options("${TARGET_NAME}" PUBLIC -Wl,--gc-sections -Wl,--print-memory-usage)
# set( CMAKE_VERBOSE_MAKEFILE on )
# Generate extra outputs
pico_add_extra_outputs("${TARGET_NAME}")

picowota_build_combined("${TARGET_NAME}") # build both standalone and combined executable
#picowota_build_standalone("${TARGET_NAME}")

